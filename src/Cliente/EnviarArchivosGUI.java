/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cliente;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;


/**
 *
 * @author Ismael Cortes
 */

public class EnviarArchivosGUI extends javax.swing.JFrame {
    
    private ChatGUI cg;
    private Socket socket;
    private String enviarA;
    private String archivo;
    private String myNombreUsuario;
    private DataInputStream entrada;
    private DataOutputStream salida;
    private int puerto;
    private String nombreUsuario;
    private String host;
    private StringTokenizer st;
    
    /**
     * Creates new form EnviarArchivos
     */
    public EnviarArchivosGUI() {
        initComponents();
        setLocationRelativeTo(null);//Esto sirve para que aparezca la ventana en el centro       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file_chooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        elegirArchivo_txt = new javax.swing.JTextField();
        abrirArchivo_btn = new javax.swing.JButton();
        enviarArchivo_txt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        enviarArchivo_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 0, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Elegir Archivo:");

        abrirArchivo_btn.setBackground(new java.awt.Color(255, 255, 255));
        abrirArchivo_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/archivos/carpeta.png"))); // NOI18N
        abrirArchivo_btn.setText("...");
        abrirArchivo_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivo_btnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enviar a:");

        enviarArchivo_btn.setBackground(new java.awt.Color(255, 255, 255));
        enviarArchivo_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/archivos/enviar.png"))); // NOI18N
        enviarArchivo_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarArchivo_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enviarArchivo_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(elegirArchivo_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enviarArchivo_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(abrirArchivo_btn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elegirArchivo_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(abrirArchivo_btn))
                .addGap(45, 45, 45)
                .addComponent(jLabel2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(enviarArchivo_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(enviarArchivo_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirArchivo_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivo_btnActionPerformed
        // TODO add your handling code here:
        
        showOpenDialog();
    }//GEN-LAST:event_abrirArchivo_btnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        
        cg.actualizarArchivoAdjunto(false);
        try {
            socket.close();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_formWindowClosing

    private void enviarArchivo_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarArchivo_btnActionPerformed
        // TODO add your handling code here:
        
        enviarA = enviarArchivo_txt.getText();
        archivo = elegirArchivo_txt.getText();
        
        if((enviarA.length() > 0) && (archivo.length() > 0)){
            try {
                //Borrar el texto que se encuentra en el campo del archivo a enviar
                elegirArchivo_txt.setText("");
                //Obtener nombre del Archivo
                String fname = getNombreArchivo(archivo);
                //Mandar el comando para el case con el nombre de usuario, el destinatario y el nombre de archivo.
                String format = "CMD_SEND_FILE_XD "+myNombreUsuario+" "+enviarA+" "+fname;
                //mandarlo al stream
                salida.writeUTF(format);
                System.out.println(format);
                actualizarBtn("Sending...");
                //Deshabilitar el nbotón de enviar para que no marque errores
                //si se presiona enviar si aun no hay un archivo seleccionado
                enviarArchivo_btn.setEnabled(false);
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }else{
            JOptionPane.showMessageDialog(this, "Ningún campo debe de estar vacío.","Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_enviarArchivo_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnviarArchivosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnviarArchivosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnviarArchivosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnviarArchivosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnviarArchivosGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirArchivo_btn;
    private javax.swing.JTextField elegirArchivo_txt;
    private javax.swing.JButton enviarArchivo_btn;
    private javax.swing.JTextField enviarArchivo_txt;
    private javax.swing.JFileChooser file_chooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    //Mostrar el file Chooser para que el usuario elija el archivo que desea mandar desde una interfaz
    public void showOpenDialog(){
        int intval = file_chooser.showOpenDialog(this);
        if(intval == file_chooser.APPROVE_OPTION){
            elegirArchivo_txt.setText(file_chooser.getSelectedFile().toString());
        }else{
            elegirArchivo_txt.setText("");
        }
    }

    private void actualizarBtn(String string) {
        enviarArchivo_btn.setText(string);
    }

    //Obtener el nombre del archivo, remplazando los espacios en blano por guiones bajos
    private String getNombreArchivo(String ruta) {
        File p = new File(ruta);
        String fname = p.getName();
        return fname.replace(" ", "_");
    }

    boolean prepare(String nombreUsuario, String host, int puerto, ChatGUI cg) {
        this.host = host;
        this.nombreUsuario = nombreUsuario;
        this.puerto = puerto;
        this.cg = cg;
        
        //Conectar al servidor
        try {
            socket = new Socket(host, puerto);
            salida = new DataOutputStream(socket.getOutputStream());
            entrada = new DataInputStream(socket.getInputStream());
            
            String format = "CMD_SHARINGSOCKET "+ myNombreUsuario;
            salida.writeUTF(format);
            System.out.println(format);
            
            //Empezar el hilo para enviar el archivo
            new Thread(new EnviarArchivoHilo(this)).start();
            return true;
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        return false;
    }

    public void actualizarArchivoAdjunto(boolean b) {
        cg.actualizarArchivoAdjunto(b);
    }

    public void inhabilitarGUI(boolean b) {
        if(b){ // Disable
            enviarArchivo_txt.setEditable(false);
            abrirArchivo_btn.setEnabled(false);
            enviarArchivo_txt.setEnabled(false);
            elegirArchivo_txt.setEditable(false);
            //progressbar.setVisible(true);
        } else { // Enable
            enviarArchivo_txt.setEditable(true);
            enviarArchivo_txt.setEnabled(true);
            abrirArchivo_btn.setEnabled(true);
            elegirArchivo_txt.setEditable(true);
            //progressbar.setVisible(false);
        }
    }

    public void setMyTitle(String s) {
        setTitle(s);
    }

    void closeThis() {
        dispose();
    }
    
    class EnviarArchivoHilo implements Runnable{

        private EnviarArchivosGUI form;
        
        public EnviarArchivoHilo(EnviarArchivosGUI form){
            this.form = form;
        }
        
        private void closeMe(){
            try {
                socket.close();
            } catch (IOException e) {
                System.out.println("[closeMe]: "+e.getMessage());
            }
            dispose();
        }
        
        @Override
        public void run() {
            try {
                while(!Thread.currentThread().isInterrupted()){
                    //Leer el contenido de los datos obtenidos desde el servidor
                    String data = entrada.readUTF();  
                    st = new StringTokenizer(data);
                    //Obtener la primera palabra de los datos  
                    String cmd = st.nextToken();  
                    switch(cmd){
                        case "CMD_RECEIVE_FILE_ERROR":
                            String msg = "";
                            while(st.hasMoreTokens()){
                                msg = msg+" "+st.nextToken();
                            }
                            form.actualizarArchivoAdjunto(false);
                            JOptionPane.showMessageDialog(EnviarArchivosGUI.this, msg, "Error", JOptionPane.ERROR_MESSAGE);
                            this.closeMe();
                            break;
                        //Case del Comando para enviar el archivo cuando se ha aceptado la peticón   
                        case "CMD_RECEIVE_FILE_ACCEPT":  
                            //Empezar el hilo de los archivos adjuntos
                            new Thread(new EnviarArchivo(socket, archivo, enviarA, myNombreUsuario, EnviarArchivosGUI.this)).start();
                            break;
                            
                        case "CMD_SENDFILEERROR":
                            String emsg = "";
                            while(st.hasMoreTokens()){
                                emsg = emsg +" "+ st.nextToken();
                            }                                                     
                            System.out.println(emsg);                            
                            JOptionPane.showMessageDialog(EnviarArchivosGUI.this, emsg,"Error", JOptionPane.ERROR_MESSAGE);
                            form.actualizarArchivoAdjunto(false);
                            form.inhabilitarGUI(false);
                            form.actualizarBtn("Send File");
                            break;
                        
                        
                        case "CMD_SENDFILERESPONSE":
                            String rReceiver = st.nextToken();
                            String rMsg = "";
                            while(st.hasMoreTokens()){
                                rMsg = rMsg+" "+st.nextToken();
                            }
                            form.actualizarArchivoAdjunto(false);
                            JOptionPane.showMessageDialog(EnviarArchivosGUI.this, rMsg, "Error", JOptionPane.ERROR_MESSAGE);
                            dispose();
                            break;
                    }
                }
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }
    
    }
    
}
